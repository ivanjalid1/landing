const db = require('../models');
const { Content } = db;
const { validationResult } = require('express-validator');

// Contenido hardcodeado como fallback
const hardcodedContent = {
  hero: {
    title: "¬°Tu agencia #1 para activos publicitarios y soluciones!",
    subtitle: "Nos enorgullece apoyar tu negocio y ayudarte a superar obst√°culos de baneos de Facebook. Nuestra dedicaci√≥n asegura soluciones efectivas para escalar tus anuncios y tu negocio.",
    buttonText: "üöÄ Contacto Directo",
    buttonLink: "#contact",
    paymentInfo: "Cont√°ctanos para pagar usando VISA, Wise, Payoneer, Transferencia Bancaria, IBAN",
    supportText: "Soporte"
  },
  services: {
    title: "Servicios Premium",
    subtitle: "Soluciones integrales para tu crecimiento digital",
    services: [
      {
        id: 1,
        title: "Facebook Business",
        description: "Gesti√≥n completa de campa√±as publicitarias en Facebook e Instagram",
        icon: "üì±",
        features: [
          "Configuraci√≥n de p√≠xeles",
          "Optimizaci√≥n autom√°tica",
          "Reportes detallados",
          "A/B testing",
          "Audiencias personalizadas",
          "Soporte 24/7"
        ],
        price: "Desde $500/mes",
        popular: true
      },
      {
        id: 2,
        title: "Google Ads",
        description: "Campa√±as de b√∫squeda y display para m√°ximo ROI",
        icon: "üîç",
        features: [
          "Keyword research",
          "Optimizaci√≥n de calidad",
          "Remarketing",
          "Analytics avanzado",
          "Gesti√≥n de presupuesto",
          "Reportes semanales"
        ],
        price: "Desde $400/mes"
      },
      {
        id: 3,
        title: "Advanced Analytics",
        description: "An√°lisis profundo de datos para decisiones estrat√©gicas",
        icon: "üìä",
        features: [
          "Dashboard personalizado",
          "Tracking avanzado",
          "Conversiones optimizadas",
          "ROI tracking",
          "Integraci√≥n multi-canal",
          "Consultor√≠a mensual"
        ],
        price: "Desde $300/mes"
      }
    ]
  },
  accounts: {
    title: "Cuentas Premium",
    subtitle: "Acceso a las mejores herramientas del mercado",
    accounts: [
      {
        id: 1,
        title: "Facebook Business Manager",
        description: "Cuenta verificada con historial limpio",
        features: [
          "Verificaci√≥n completa",
          "Sin restricciones",
          "Soporte t√©cnico",
          "Backup autom√°tico",
          "Monitoreo 24/7",
          "Garant√≠a de reemplazo"
        ],
        price: "$299",
        popular: true,
        badge: "M√°s Popular"
      },
      {
        id: 2,
        title: "Google Ads Manager",
        description: "Cuenta optimizada para m√°ximo rendimiento",
        features: [
          "Configuraci√≥n avanzada",
          "Historial positivo",
          "Soporte prioritario",
          "Optimizaci√≥n autom√°tica",
          "Reportes detallados",
          "Garant√≠a extendida"
        ],
        price: "$249"
      },
      {
        id: 3,
        title: "TikTok Ads",
        description: "Cuenta para publicidad en TikTok",
        features: [
          "Verificaci√≥n completa",
          "Sin l√≠mites",
          "Soporte especializado",
          "Optimizaci√≥n manual",
          "Analytics avanzado",
          "Garant√≠a de funcionamiento"
        ],
        price: "$199"
      }
    ]
  },
  solutions: {
    title: "Soluciones Enterprise",
    subtitle: "Tecnolog√≠a avanzada para empresas",
    solutions: [
      {
        id: 1,
        title: "Machine Learning",
        description: "Algoritmos de IA para optimizaci√≥n autom√°tica",
        icon: "ü§ñ",
        features: [
          "Optimizaci√≥n autom√°tica",
          "Predicci√≥n de resultados",
          "Aprendizaje continuo",
          "Integraci√≥n API",
          "Dashboard en tiempo real",
          "Soporte t√©cnico"
        ]
      },
      {
        id: 2,
        title: "Big Data Analytics",
        description: "An√°lisis de grandes vol√∫menes de datos",
        icon: "üìà",
        features: [
          "Procesamiento masivo",
          "Visualizaci√≥n avanzada",
          "Reportes autom√°ticos",
          "Alertas inteligentes",
          "Integraci√≥n multi-fuente",
          "Consultor√≠a especializada"
        ]
      },
      {
        id: 3,
        title: "Cloud Infrastructure",
        description: "Infraestructura escalable en la nube",
        icon: "‚òÅÔ∏è",
        features: [
          "Escalabilidad autom√°tica",
          "Alta disponibilidad",
          "Seguridad avanzada",
          "Backup autom√°tico",
          "Monitoreo 24/7",
          "Soporte enterprise"
        ]
      }
    ]
  },
  faq: {
    title: "Preguntas Frecuentes",
    subtitle: "Resolvemos tus dudas m√°s comunes",
    questions: [
      {
        id: 1,
        question: "¬øCu√°nto tiempo toma ver resultados?",
        answer: "Los primeros resultados suelen verse en 2-4 semanas, dependiendo del tipo de campa√±a y el mercado objetivo."
      },
      {
        id: 2,
        question: "¬øQu√© presupuesto m√≠nimo necesito?",
        answer: "Recomendamos un presupuesto m√≠nimo de $500/mes para campa√±as efectivas, pero podemos adaptarnos a diferentes presupuestos."
      },
      {
        id: 3,
        question: "¬øOfrecen garant√≠a de resultados?",
        answer: "S√≠, ofrecemos garant√≠a de mejora en m√©tricas clave. Si no alcanzamos los objetivos acordados, ajustamos la estrategia sin costo adicional."
      },
      {
        id: 4,
        question: "¬øC√≥mo miden el ROI?",
        answer: "Utilizamos herramientas avanzadas de tracking y analytics para medir conversiones, costos y retorno de inversi√≥n en tiempo real."
      },
      {
        id: 5,
        question: "¬øTrabajan con empresas peque√±as?",
        answer: "S√≠, tenemos planes adaptados para empresas de todos los tama√±os, desde startups hasta corporaciones."
      },
      {
        id: 6,
        question: "¬øQu√© incluye el soporte t√©cnico?",
        answer: "Incluye consultor√≠a estrat√©gica, optimizaci√≥n de campa√±as, reportes semanales y soporte por WhatsApp 24/7."
      }
    ]
  }
};

// Obtener contenido p√∫blico de una secci√≥n espec√≠fica (sin cache)
const getPublicContent = async (req, res) => {
  try {
    const { section } = req.params;
    
    // Intentar obtener de la base de datos
    const content = await Content.findOne({
      where: { section, isActive: true }
    });

    if (content) {
      // Si existe en la BD, devolverlo
      res.json({
        success: true,
        data: content,
        cached: false
      });
    } else {
      // Si no existe, devolver contenido hardcodeado
      const hardcodedData = hardcodedContent[section];
      if (hardcodedData) {
        res.json({
          success: true,
          data: {
            section,
            data: hardcodedData,
            isActive: true
          },
          cached: false,
          fallback: true
        });
      } else {
        res.status(404).json({
          success: false,
          message: `Contenido de la secci√≥n '${section}' no encontrado`
        });
      }
    }
  } catch (error) {
    console.error('Error al obtener contenido p√∫blico:', error);
    // En caso de error, devolver contenido hardcodeado
    const hardcodedData = hardcodedContent[section];
    if (hardcodedData) {
      res.json({
        success: true,
        data: {
          section,
          data: hardcodedData,
          isActive: true
        },
        cached: false,
        fallback: true
      });
    } else {
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor'
      });
    }
  }
};

// Obtener todo el contenido p√∫blico (sin cache)
const getAllPublicContent = async (req, res) => {
  try {
    const contents = await Content.findAll({
      where: { isActive: true },
      order: [['section', 'ASC']]
    });

    res.json({
      success: true,
      data: contents,
      cached: false
    });
  } catch (error) {
    console.error('Error al obtener todo el contenido p√∫blico:', error);
    res.status(500).json({
      success: false,
      message: 'Error interno del servidor'
    });
  }
};

// Obtener contenido de una secci√≥n espec√≠fica (sin cache)
const getContent = async (req, res) => {
  try {
    const { section } = req.params;
    
    const content = await Content.findOne({
      where: { section, isActive: true }
    });

    if (!content) {
      return res.status(404).json({
        success: false,
        message: `Contenido de la secci√≥n '${section}' no encontrado`
      });
    }

    res.json({
      success: true,
      data: content,
      cached: false
    });
  } catch (error) {
    console.error('Error al obtener contenido:', error);
    res.status(500).json({
      success: false,
      message: 'Error interno del servidor'
    });
  }
};

// Obtener todo el contenido (sin cache)
const getAllContent = async (req, res) => {
  try {
    const contents = await Content.findAll({
      where: { isActive: true },
      order: [['section', 'ASC']]
    });

    res.json({
      success: true,
      data: contents,
      cached: false
    });
  } catch (error) {
    console.error('Error al obtener todo el contenido:', error);
    res.status(500).json({
      success: false,
      message: 'Error interno del servidor'
    });
  }
};

// Crear o actualizar contenido de una secci√≥n
const updateContent = async (req, res) => {
  try {
    const { section } = req.params;
    const { data } = req.body;

    // Validaciones b√°sicas
    if (!data || typeof data !== 'object') {
      return res.status(400).json({
        success: false,
        message: 'Los datos son requeridos y deben ser un objeto'
      });
    }

    // Buscar si ya existe contenido para esta secci√≥n
    let content = await Content.findOne({
      where: { section }
    });

    if (content) {
      // Actualizar contenido existente
      await content.update({
        data,
        updatedAt: new Date()
      });
    } else {
      // Crear nuevo contenido
      content = await Content.create({
        section,
        data,
        isActive: true
      });
    }

    res.json({
      success: true,
      message: `Contenido de la secci√≥n '${section}' actualizado exitosamente`,
      data: content
    });
  } catch (error) {
    console.error('Error al actualizar contenido:', error);
    res.status(500).json({
      success: false,
      message: 'Error interno del servidor'
    });
  }
};

// Eliminar contenido de una secci√≥n (soft delete)
const deleteContent = async (req, res) => {
  try {
    const { section } = req.params;
    
    const content = await Content.findOne({
      where: { section, isActive: true }
    });

    if (!content) {
      return res.status(404).json({
        success: false,
        message: `Contenido de la secci√≥n '${section}' no encontrado`
      });
    }

    await content.update({ isActive: false });

    res.json({
      success: true,
      message: `Contenido de la secci√≥n '${section}' eliminado exitosamente`
    });
  } catch (error) {
    console.error('Error al eliminar contenido:', error);
    res.status(500).json({
      success: false,
      message: 'Error interno del servidor'
    });
  }
};

// Obtener secciones disponibles
const getSections = async (req, res) => {
  try {
    const sections = [
      {
        name: 'hero',
        title: 'Secci√≥n Hero',
        description: 'T√≠tulo principal, subt√≠tulo, im√°genes y botones'
      },
      {
        name: 'services',
        title: 'Servicios',
        description: 'Lista de servicios ofrecidos'
      },
      {
        name: 'accounts',
        title: 'Cuentas Premium',
        description: 'Cuentas premium disponibles'
      },
      {
        name: 'solutions',
        title: 'Soluciones Enterprise',
        description: 'Soluciones t√©cnicas para empresas'
      },
      {
        name: 'faq',
        title: 'Preguntas Frecuentes',
        description: 'Preguntas y respuestas'
      },
      {
        name: 'cta',
        title: 'Call to Action Final',
        description: 'Bot√≥n de llamada a la acci√≥n'
      },
      {
        name: 'footer',
        title: 'Footer',
        description: 'Informaci√≥n de contacto y enlaces'
      }
    ];

    res.json({
      success: true,
      data: sections,
      cached: false
    });
  } catch (error) {
    console.error('Error al obtener secciones:', error);
    res.status(500).json({
      success: false,
      message: 'Error interno del servidor'
    });
  }
};

module.exports = {
  getPublicContent,
  getAllPublicContent,
  getContent,
  getAllContent,
  updateContent,
  deleteContent,
  getSections
}; 