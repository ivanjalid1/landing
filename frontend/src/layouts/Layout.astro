---
import { ViewTransitions } from 'astro:transitions';
import { translations } from '../i18n/translations.js';
import { extractLanguageFromUrl } from '../middleware/i18n.js';

interface Props {
  title: string;
  description: string;
}

const { title, description } = Astro.props;
const currentLang = extractLanguageFromUrl(Astro.url.pathname);
const t = translations[currentLang as keyof typeof translations];
---

<!doctype html>
<html lang={currentLang || 'es'}>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions />
  </head>
  <body class="overflow-x-hidden">
    <!-- Loading Screen -->
    <div id="loading-screen" class="fixed inset-0 z-[9999] bg-tech-900 flex items-center justify-center">
      <div class="relative">
        <div class="absolute inset-0 bg-gradient-to-r from-primary-500 to-primary-600 rounded-xl blur animate-pulse"></div>
        <div class="relative w-16 h-16 rounded-xl bg-white flex items-center justify-center">
          <span class="text-transparent bg-gradient-to-r from-primary-500 to-primary-600 bg-clip-text font-bold text-4xl">T</span>
        </div>
      </div>
    </div>

    <slot />
  </body>
</html>

<style is:global>
/* Scrollbar Styles */
::-webkit-scrollbar {
  width: 0;
  background: transparent;
}

/* Animations */
@keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slide-up {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slide-down {
  from {
    opacity: 0;
    transform: translateY(-30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slide-left {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slide-right {
  from {
    opacity: 0;
    transform: translateX(30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes scale-up {
  from {
    opacity: 0;
    transform: scale(0.8);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes gradient-x {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

.animate-fade-in {
  opacity: 0;
  animation: fade-in 1s ease-out forwards;
}

.animate-slide-up {
  opacity: 0;
  animation: slide-up 1s ease-out forwards;
  animation-delay: var(--delay, 0s);
}

.animate-slide-down {
  opacity: 0;
  animation: slide-down 1s ease-out forwards;
  animation-delay: var(--delay, 0s);
}

.animate-slide-left {
  opacity: 0;
  animation: slide-left 1s ease-out forwards;
  animation-delay: var(--delay, 0s);
}

.animate-slide-right {
  opacity: 0;
  animation: slide-right 1s ease-out forwards;
  animation-delay: var(--delay, 0s);
}

.animate-scale-up {
  opacity: 0;
  animation: scale-up 1s ease-out forwards;
  animation-delay: var(--delay, 0s);
}

.animate-gradient-x {
  animation: gradient-x 15s ease infinite;
  background-size: 200% 200%;
}

/* Scroll Reveal */
.scroll-reveal {
  opacity: 0;
  transform: translateY(20px);
  transition: all 0.6s ease-out;
}

.scroll-reveal.revealed {
  opacity: 1;
  transform: translateY(0);
}

.scroll-reveal-left {
  opacity: 0;
  transform: translateX(-20px);
  transition: all 0.6s ease-out;
}

.scroll-reveal-left.revealed {
  opacity: 1;
  transform: translateX(0);
}

.scroll-reveal-right {
  opacity: 0;
  transform: translateX(20px);
  transition: all 0.6s ease-out;
}

.scroll-reveal-right.revealed {
  opacity: 1;
  transform: translateX(0);
}

.scroll-reveal-scale {
  opacity: 0;
  transform: scale(0.95);
  transition: all 0.6s ease-out;
}

.scroll-reveal-scale.revealed {
  opacity: 1;
  transform: scale(1);
}
</style>

<script>
  import { safeDOM, onWindowLoad, onDOMContentLoaded, getCurrentPath } from '../utils/browser.js';
  import { redirectToLanguage } from '../scripts/languageDetection.js';

  // Loading screen
  onWindowLoad(() => {
    const loadingScreen = safeDOM.getElementById('loading-screen');
    if (loadingScreen) {
      setTimeout(() => {
        loadingScreen.style.opacity = '0';
        setTimeout(() => {
          loadingScreen.style.display = 'none';
          loadingScreen.style.visibility = 'hidden';
        }, 1000);
      }, 500);
    }
  });

  // Asegurar que el loading screen se oculte también en DOMContentLoaded
  onDOMContentLoaded(() => {
    const loadingScreen = safeDOM.getElementById('loading-screen');
    if (loadingScreen) {
      setTimeout(() => {
        loadingScreen.style.opacity = '0';
        setTimeout(() => {
          loadingScreen.style.display = 'none';
          loadingScreen.style.visibility = 'hidden';
        }, 1000);
      }, 1000);
    }
  });

  // Intersection Observer para animaciones al hacer scroll
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('revealed');
      }
    });
  }, observerOptions);

  // Observar elementos con scroll-reveal
  onDOMContentLoaded(() => {
    const scrollRevealElements = document.querySelectorAll('.scroll-reveal, .scroll-reveal-left, .scroll-reveal-right, .scroll-reveal-scale');
    scrollRevealElements.forEach(el => observer.observe(el));
  });

  // Smooth scroll para enlaces internos
  onDOMContentLoaded(() => {
    safeDOM.querySelectorAll('a[href^="#"]').forEach(anchor => {
      safeDOM.addEventListener(anchor, 'click', function (e) {
        e.preventDefault();
        const target = safeDOM.querySelector(this.getAttribute('href'));
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });
  });

  // Detección de idioma
  if (getCurrentPath() === '/') {
    redirectToLanguage();
  }
</script> 