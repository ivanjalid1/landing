---
import { translations } from '../i18n/translations.js';
import { extractLanguageFromUrl } from '../middleware/i18n.js';

const currentLang = extractLanguageFromUrl(Astro.url.pathname);
const t = translations[currentLang as keyof typeof translations];

const plans = [
  {
    name: "Starter",
    price: "499",
    description: "Ideal para comenzar con publicidad digital",
    features: [
      { text: "campañas activas simultáneas", highlight: true, value: "5" },
      { text: "Optimización semanal de rendimiento", highlight: true },
      { text: "Reportes detallados semanales", highlight: false },
      { text: "acceso a dashboard", highlight: false, value: "1" },
      { text: "Pixel Tracking avanzado", highlight: true },
      { text: "Garantía de satisfacción", highlight: true, value: "30 días" }
    ],
    metrics: {
      campaigns: "5 campañas",
      support: "Soporte básico",
      optimization: "Semanal"
    },
    badge: "Popular",
    cta: "Comenzar Ahora"
  },
  {
    name: "Professional",
    price: "999",
    description: "Para negocios en crecimiento",
    features: [
      { text: "campañas activas simultáneas", highlight: true, value: "15" },
      { text: "Optimización diaria automatizada", highlight: true },
      { text: "Reportes en tiempo real", highlight: true },
      { text: "accesos a dashboard", highlight: true, value: "3" },
      { text: "API Access + Webhooks", highlight: true },
      { text: "Garantía de satisfacción", highlight: true, value: "60 días" }
    ],
    metrics: {
      campaigns: "15 campañas",
      support: "Soporte 24/7",
      optimization: "Diaria"
    },
    badge: "Recomendado",
    cta: "Escalar Ahora"
  },
  {
    name: "Enterprise",
    price: "Custom",
    description: "Soluciones personalizadas para grandes empresas",
    features: [
      { text: "campañas activas personalizadas", highlight: true, value: "25+" },
      { text: "Optimización en tiempo real con IA", highlight: true },
      { text: "Reportes personalizados", highlight: true },
      { text: "accesos a dashboard", highlight: true, value: "10+" },
      { text: "API dedicada + Webhooks", highlight: true },
      { text: "Garantía de satisfacción", highlight: true, value: "90 días" }
    ],
    metrics: {
      campaigns: "25+ campañas",
      support: "Soporte VIP",
      optimization: "Tiempo real"
    },
    badge: "Enterprise",
    cta: "Contactar"
  }
];
---

<section class="relative py-24 bg-tech-900 text-white overflow-hidden" id="accounts">
  <!-- Background Effects -->
  <div class="absolute inset-0">
    <div class="absolute inset-0 bg-[radial-gradient(circle_at_30%_50%,rgba(249,115,22,0.15),transparent)]"></div>
    <div class="absolute inset-0 bg-[radial-gradient(circle_at_70%_80%,rgba(249,115,22,0.1),transparent)]"></div>
    <div class="absolute inset-0 bg-grid-pattern"></div>
  </div>

  <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-20 scroll-reveal">
      <div class="inline-flex items-center px-4 py-2 rounded-full bg-tech-800/80 border border-tech-700/50 backdrop-blur-sm mb-8">
        <span class="animate-pulse w-2.5 h-2.5 bg-primary-500 rounded-full mr-3"></span>
        <span class="text-primary-400 text-sm font-medium tracking-wide">Planes Premium</span>
      </div>

      <h2 class="text-5xl lg:text-6xl font-bold text-white mb-8">
        Planes <span class="text-transparent bg-clip-text bg-gradient-to-r from-primary-400 via-primary-500 to-primary-600 animate-gradient-x">Premium</span>
      </h2>

      <p class="text-xl text-tech-300 max-w-3xl mx-auto">
        Selecciona el plan que mejor se adapte a tus necesidades
      </p>
    </div>

    <!-- Innovative Plans Layout -->
    <div class="relative max-w-6xl mx-auto">
      {plans.map((plan, index) => (
        <div class="relative scroll-reveal mb-20 last:mb-0" style={`--delay: ${index * 0.2}s`}>
          <!-- Background Glow -->
          <div class="absolute -inset-8 bg-gradient-to-r from-primary-500/5 to-primary-600/5 rounded-3xl blur-2xl"></div>
          
          <!-- Main Content -->
          <div class="relative flex flex-col lg:flex-row gap-10 items-stretch">
            <!-- Left Side: Info -->
            <div class="flex-1 bg-tech-800/40 rounded-2xl p-10 backdrop-blur-sm border border-tech-700/40 shadow-xl">
              <!-- Badge -->
              <div class="inline-flex items-center px-4 py-1.5 rounded-full bg-gradient-to-r from-primary-500 to-primary-600 mb-8">
                <span class="text-sm font-medium text-white tracking-wide">{plan.badge}</span>
              </div>

              <!-- Plan Info -->
              <h3 class="text-4xl font-bold text-white mb-4">{plan.name}</h3>
              <div class="flex items-baseline gap-2 mb-6">
                <span class="text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-primary-400 to-primary-500">
                  {plan.price === "Custom" ? "Custom" : `$${plan.price}`}
                </span>
                {plan.price !== "Custom" && (
                  <span class="text-tech-400">/mes</span>
                )}
              </div>
              <p class="text-lg text-tech-300 mb-10">{plan.description}</p>

              <!-- Metrics -->
              <div class="grid grid-cols-3 gap-6 mb-10">
                <div class="text-center group">
                  <div class="w-14 h-14 mx-auto mb-3 rounded-xl bg-tech-700/50 flex items-center justify-center group-hover:bg-tech-700/70 transition-all duration-300">
                    <svg class="w-7 h-7 text-primary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                    </svg>
                  </div>
                  <div class="text-base text-tech-300 group-hover:text-tech-200 transition-colors duration-300">
                    <span class="animate-number font-bold text-primary-400" data-value={plan.metrics.campaigns.split(' ')[0].replace('+', '')}>{plan.metrics.campaigns.split(' ')[0]}</span>
                    <span class="ml-1">campañas</span>
                  </div>
                </div>
                <div class="text-center group">
                  <div class="w-14 h-14 mx-auto mb-3 rounded-xl bg-tech-700/50 flex items-center justify-center group-hover:bg-tech-700/70 transition-all duration-300">
                    <svg class="w-7 h-7 text-primary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192l-3.536 3.536M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-5 0a4 4 0 11-8 0 4 4 0 018 0z"></path>
                    </svg>
                  </div>
                  <div class="text-base text-tech-300 group-hover:text-tech-200 transition-colors duration-300">
                    <span class="animate-number font-bold text-primary-400" data-value={plan.metrics.support.split(' ')[0].replace('+', '')}>{plan.metrics.support.split(' ')[0]}</span>
                    <span class="ml-1">soporte</span>
                  </div>
                </div>
                <div class="text-center group">
                  <div class="w-14 h-14 mx-auto mb-3 rounded-xl bg-tech-700/50 flex items-center justify-center group-hover:bg-tech-700/70 transition-all duration-300">
                    <svg class="w-7 h-7 text-primary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                    </svg>
                  </div>
                  <div class="text-base text-tech-300 group-hover:text-tech-200 transition-colors duration-300">
                    <span class="animate-number font-bold text-primary-400" data-value={plan.metrics.optimization.split(' ')[0].replace('+', '')}>{plan.metrics.optimization.split(' ')[0]}</span>
                    <span class="ml-1">optimización</span>
                  </div>
                </div>
              </div>

              <!-- CTA -->
              <a
                href="#contact"
                class="group relative inline-flex items-center gap-3 px-8 py-4 bg-gradient-to-r from-primary-500 to-primary-600 text-white rounded-xl overflow-hidden shadow-lg shadow-primary-500/20 hover:shadow-xl hover:shadow-primary-500/30 transition-all duration-300 hover:scale-[1.02] w-full justify-center"
                onclick="scrollToSection(event, 'contact')"
              >
                <div class="absolute inset-0 bg-gradient-to-r from-primary-600 to-primary-500 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                <span class="relative font-semibold text-lg">{plan.cta}</span>
                <svg class="relative w-5 h-5 transform group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
                </svg>
              </a>
            </div>

            <!-- Right Side: Features -->
            <div class="flex-1 bg-tech-800/40 rounded-2xl p-10 backdrop-blur-sm border border-tech-700/40 shadow-xl">
              <h4 class="text-2xl font-bold text-white mb-8">Características incluidas:</h4>
              <div class="space-y-6">
                {plan.features.map((feature) => (
                  <div class="flex items-center gap-4 group">
                    <div class="relative flex-shrink-0">
                      <div class="absolute inset-0 bg-gradient-to-r from-primary-500/20 to-primary-600/20 rounded-full blur-md group-hover:blur-lg transition-all duration-300"></div>
                      <div class="relative w-6 h-6 flex items-center justify-center">
                        <svg class={`w-5 h-5 ${feature.highlight ? 'text-primary-500' : 'text-tech-400'}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                      </div>
                    </div>
                    <span class={`text-base ${feature.highlight ? 'text-white font-medium' : 'text-tech-300'} group-hover:translate-x-1 transition-transform duration-300`}>
                      {feature.value ? (
                        <>
                          <span class="animate-number font-bold text-primary-400" data-value={feature.value.replace('+', '')}>{feature.value}</span>
                          {feature.value.includes('+') && <span class="font-bold text-primary-400">+</span>}
                        </>
                      ) : ''} {feature.text}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<style>
@keyframes gradient-x {
  0%, 100% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
}

.animate-gradient-x {
  animation: gradient-x 15s ease infinite;
  background-size: 200% 200%;
}

.bg-grid-pattern {
  background-image: radial-gradient(rgba(255,255,255,0.03) 1px, transparent 1px);
  background-size: 30px 30px;
}

.scroll-reveal {
  opacity: 0;
  transform: translateY(20px);
  transition: all 0.8s cubic-bezier(0.16, 1, 0.3, 1);
  animation-delay: var(--delay, 0s);
}

.scroll-reveal.revealed {
  opacity: 1;
  transform: translateY(0);
}
</style>

<script>
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('revealed');
      }
    });
  }, observerOptions);

  document.addEventListener('DOMContentLoaded', () => {
    const scrollRevealElements = document.querySelectorAll('.scroll-reveal');
    scrollRevealElements.forEach(el => observer.observe(el));
  });
</script>